1、使用 redis benchmark 工具, 测试 10 20 50 100 200 1k 5k 字节 value 大小，redis get set 性能。

redis-benchmark -t get,set -n 1000 -q -d 10
SET: 71428.57 requests per second
GET: 71428.57 requests per second


redis-benchmark -t get,set -n 1000 -q -d 20
SET: 100000.00 requests per second
GET: 83333.34 requests per second


redis-benchmark -t get,set -n 1000 -q -d 50
SET: 66666.67 requests per second
GET: 76923.08 requests per second


redis-benchmark -t get,set -n 1000 -q -d 100
SET: 90909.09 requests per second
GET: 90909.09 requests per second

redis-benchmark -t get,set -n 1000 -q -d 200
SET: 71428.57 requests per second
GET: 71428.57 requests per second


redis-benchmark -t get,set -n 1000 -q -d 1000
SET: 76923.08 requests per second
GET: 76923.08 requests per second


redis-benchmark -t get,set -n 1000 -q -d 5000
SET: 38461.54 requests per second
GET: 90909.09 requests per second

2、写入一定量的 kv 数据, 根据数据大小 1w-50w 自己评估, 结合写入前后的 info memory 信息  , 分析上述不同 value 大小下，平均每个 key 的占用内存空间。

命令	                   填充前内存	填充后内存	增加内存字节数	平均每key占用字节数
DEBUG POPULATE 10 t1 10000	723240	      826248	103008	           10300
DEBUG POPULATE 10 t2 50000	826248	      1400296	574048	           57404
DEBUG POPULATE 10 t3 100000	1400296	      2547952	1147656	           114765
DEBUG POPULATE 10 t4 250000	2547952	      5170128	2622176	           262217
DEBUG POPULATE 10 t5 500000	5170128	      10413488	5243360	           524336
